[ { "title": "Radare2 On Android üì±", "url": "/posts/Radare2-On-Android/", "categories": "Tutorials", "tags": "android, termux, re, radare2, reversing, setup, ghidra, decompiler, disassembly", "date": "2022-05-10 18:22:04 +0530", "snippet": "In this tutorial we are going to install radare2 a reverse-engineering tool on android üì±IntroI was working on a few arm64 crackme with qemu [1] [2] and it struck my mind. ‚ÄòMy android device is arm64, If i can run it there it could be portable‚Äô.Thats where the exploration began, and here‚Äôs the story to it.Why Radare?Radare is a tui based RE tool, and runs in most linux distros. It has a great community and is very famous. (It also has a fork rizin, famous for its GUI Cutter). Radare also supports plugins and most importantly there‚Äôs a ghidra plugin (which we will be installing in this tutorial later on).Termux is a FOSS android proot debian based environment. It supports most android devices, and has a huge repo of tools including gcc, python, rust and‚Ä¶ radare2.As a matter of fact, (SPOILERS) i‚Äôve previously used radare2 on android, but i hadn‚Äôt tried the ghidra plugin yet. This was the right time to try it.Installing Radadre2Installing radare2 on termux is very easy. Termux repo provides us prebuilt radare2 binaries (thanks termux community) but we can also build it ourselves if we decided to.To install it i‚Äôm gonna update the packages first and then install radare2 using apt-get.apt updateapt-get install radare2 -yThis should install radare2. üòÑTrying it outTo test out radare2 i downloaded and compiled a few sample crackmes from NoraCodes crackmes repo.git clone https://github.com/NoraCodes/crackmes.gitTo compile them i needed gcc and make, so i installed clang and make packages.apt-get install clang make -yNow it should compile using makemake crackme01Great, We now have a crackme to test. Let‚Äôs run radare2.r2 -AA crackme01# or radare2 -AA crackme01Note: -AA here runs the analysis after opening radare2.optionally we can type aaa in the radare console.This should open the binary in radare and automatically start analyzing it.Once it finishes we can list the functions using afl.Then seek to the function using s [function id here].Great Radare2 Works on Android!Cheat SheetsFor more commands i recommend these cheat sheets: Radare2 Cheet Sheet by williballenthin Radare2 Gitbook Radare2 Wiki Radare2 RTD ReHex Ninja Cheat Sheet Radare2 Binary Adventures PlaylistTaking it a JMP Further with GhidraWe have a diassembler working on android, great, now let‚Äôs get a little pseudocode magic.For this we will be using r2ghidra, a radare2 plugin that uses native ghidra for decompiling to C pseudocode code.On checking the releases, r2ghidra doesn‚Äôt provide any artifacts for arm64, so we will have to build it manually. This would require approximately 900 Mb of storage in your device (clang 300 Mb. build requires 300 Mb. r2ghidra plugin 300 Mb)First lets download a release package. I choose the release Source_Code.tar.gz as it should preserve the .git folder (we might require submodules).wget https://github.com/radareorg/r2ghidra/archive/refs/tags/v5.6.8.tar.gz -o r2ghidra.tar.gztar -xvf r2ghidra.tar.gzcd r2ghidraNow that we have the sources, we need to follow the build instructions. The instructions say we must run these commands in order../preconfigure # optional, but useful for offline-packagers, as its downloads the external repos./configuremakemake installThis should start building and installing r2ghidra plugin.Note: Keep in mind there is a submodule inside the third-party folder. In case we get errors pugixml.cpp or pugixml.hpp not found, we will need to download / clone it from pugixml.Using r2ghidraTo use r2ghidra we just gotta open a binary, and seek(s [address/function]) to the target function / sub. Then use pdg command.&amp;gt; pd? # gives help output&amp;gt; pdg # use ghidraThanks to‚Ä¶ Wonderfull Radare2 Team and Contributors. Pankake for this wonderfull tool and r2ghidra plugin. You, for reading this post üòâOutro!That‚Äôs It for this post. I‚Äôll save cooler stuff for lated posts. Hope you learnt something new today.Let me know if you liked / disliked the post by leaving a comment below! :)~ **CypherpunkSamurai** Logs_Off...." }, { "title": "Running Alpine Chroot On Android (without Termux)", "url": "/posts/Running-Alpine-Chroot-On-Android-(without-Termux)/", "categories": "NoteDown, Tutorials", "tags": "android, no-termux, shell, chroot, proot, rootfs", "date": "2022-02-26 00:55:04 +0530", "snippet": "This is my post on how I managed to run a alpine chroot system on android without root üåøIntroSo, I was recently using Termux when a thought came to my mind ü§î.It‚Äôs fascinating how Android has grown since KitKat era. We used to have terminals that looked like xterm without styling. Jackpal Android Term used to be what came along Kali Nethunter üòå.The only ways to run Linux on android was chrooting (change root), on a rooted device. Linux Deploy one of very first apps that perfected it. It came Pre-installed on Kali Nethunter so you can run a Kali subsystem on android, very cool back in days üòå. Now‚Ä¶. Now we have Termux that works without root. You can now run Arch to Kali, heck even Gentoo without root ü§Ø. How did we come this far? ü§®Good Question ü§î, I strongly believe this is because of the simple tool proot. That uses user-level resources to chroot into a rootfs. Termux project added patches that allowed them to make it more compatible for Android devices, and then Termux was born ‚ú®.Let Me Show You How ü™¥Required We need Android Terminal EmulatorSuggested Terminals: Terminal by Alif Software - (recommended) TermOne Plus Jackpal Android Term Alpine RootFs tarball BusyboxConfigsSet this as initial command so everytime we start terminal we are at app_HOME folder üìÇ.cd $HOME &amp;amp;&amp;amp; clear Then we setup a small rootfs for terminal emulator.mkdir bincd binWe need to add this bin folder to PATH, so we can access binaries inside it.# Assuming we are at ./bin folderEXPORT PATH=$PATH:$(pwd)echo $PATHDownload BusyboxDownloading busybox is easy. We will use Busybox from Magisk-Modules-Repo which are compiled from (osm0sis Android Busybox Repo)[https://github.com/osm0sis/android-busybox-ndk]. We will download it with curl, because wget is not installed in android. I‚Äôm using arm64 binary, use binary according to your cpu. Use cat /dev/cpuproc or uname -a to find.curl -o ./bin/busybox https://github.com/Magisk-Modules-Repo/busybox-ndk/raw/master/busybox-arm64Now we should make it executable by giving it permschmod 755 ./bin/busybox# orchmod +x ./bin/busyboxWe should now be able to run busybox tar -xvf and it wont give us gunzip not found error.Installing applets is a nice addition, so we will install busybox applets as commands. To link applet to busybox we run:ln -sf ./path/to/busybox ./path/to/applet/applet_nameLinking one command:# Assuming we are in $HOMEcd binln -sf busybox xargsNext let‚Äôs link all applets. But Busybox has so many applets, How do we install them all? :(We use the busybox --install -s ./directory command.# Considering we are at $HOME directorybusybox --install -s ./bin# Checkls ./binGreat! Now we can access all of busybox tools üëçGetting Alpine rootfsGo to Alpine Linux Downloads page and copy download link of mini rootfs according to arch. I‚Äôm downloading arm64 rootfs so i have to run:wget -O alpine.tar.gz https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/aarch64/alpine-minirootfs-3.15.0-aarch64.tar.gzIsn‚Äôt it pretty cool that we can run wget now ‚ú®! Anyway, now we use tar -x to extract to alpine dir.mkdir alpinetar -xvf alpine.tar.gz -C alpineGreat! Now we have a alpine rootfs! :)How to Chroot without root? Now that we have a alpine rootfs, how do we chroot into it? ü§®We use proot, like termux. Where do we get proot from? We don‚Äôt even have apt or pkg üòêWe download publicly available binaries.One of the repos i found searching for ‚Äòandroid proot binary‚Äô was green-green-avk/build-proot-android. It‚Äôs a fork of termux/proot with little patches. You can also use termux/proot.I downloaded and extracted the proot binary from the repo.To Download proot:curl -LO &quot;https://github.com/green-green-avk/build-proot-android/blob/master/packages/proot-android-aarch64.tar.gz&quot;To Move binaries:tar -xvf proot-android-aarch64.tar.gzmv ./root/bin/* ~/bin/mv ./root/* ~/Great, proot android is installed. Try running it with proot command.I‚ÄôM PROOTNow time to proot into our alpine rootfs. To do so we need to do it in multiple steps. So i made a simple script.#!/system/bin/shexport PATH=$PATH:$HOME/binunset LS_PRELOADROOTFS_PATH=$HOME/alpinePATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binproot \\-r $ROOTFS_PATH \\-p \\-H -0 -l -L \\-b /sys \\-b /dev \\-b /proc \\-b /proc/mounts:/etc/mtab Lot‚Äôs of thigs going on here. Let‚Äôs go line by line. #!/system/bin/shWe First declare which shell to use when this script file is run. export PATH=$PATH:$HOME/binWe set the path so we can access proot (just in case) PATH is not set. unset LS_PRELOADUnset LD_PRELOAD to prevent errors. ROOTFS_PATH=$HOME/alpineWe set the folder of the alpine rootfs. Here its in ~/alpine so $HOME/alpine. PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binWe set the new path that tells proot where to look for binaries. proot -r $ROOTFS_PATH \\We run proot with -r root location. -p \\We don‚Äôt have root access, so we use higher ports for binding. -H -0 -l -L \\We hide files starting with .proot with -H. Give our user fake root -0. We make current user group appear as ‚Äúuid:gid‚Äù with -i. We use correct size of lstats -L. -b /sys -b /dev -b /proc -b /proc/mounts:/etc/mtabHere you can see something you‚Äôll be familiar as a linux user. As Common chroot practice here we bind hardware locations to new root.and on running it we should get‚Ä¶.Objective Complete!That‚Äôs It for this post. I‚Äôll save cooler stuff for lated posts. Hope you learnt something new today.Let me know if you liked / disliked the post by leaving a comment below! :)~ **CypherpunkSamurai** Logs_Off...." }, { "title": "Welcome to the Blog! üåø", "url": "/posts/Welcome-to-the-Blog/", "categories": "Blog, Chatting", "tags": "intro, chatting", "date": "2022-02-25 16:59:47 +0530", "snippet": "Hi üëã Welcome to My Little Garden ü™¥ of Knowledge. Here I share what I‚Äôve learnt on my way to becoming the best developer.I love browsing Reddit for catpics, and news. I also prefer using HN to keep myself updated.üåøMy Topic Stack Programming and Development Reverse Engineering CI and Automation Cool Stuff (wait to find out)üå± My Language Stacks Python Golang Javascript Java C#That‚Äôs all, Enjoy your Read! ‚úåÔ∏è" } ]
